	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 11
	.globl	_rdtsc
	.align	4, 0x90
_rdtsc:                                 ## @rdtsc
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	## InlineAsm Start
	rdtsc
	## InlineAsm End
	movl	%eax, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	movl	%eax, %ecx
	shlq	$32, %rcx
	movl	-4(%rbp), %eax
	movl	%eax, %esi
	orq	%rsi, %rcx
	movq	%rcx, %rax
	popq	%rbp
	retq
	.cfi_endproc

	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp3:
	.cfi_def_cfa_offset 16
Ltmp4:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp5:
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$0, -4(%rbp)
	movl	$5, -8(%rbp)
	movl	$1000000, -12(%rbp)     ## imm = 0xF4240
	movl	$0, -16(%rbp)
LBB1_1:                                 ## =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$0, %eax
	je	LBB1_3
## BB#2:                                ##   in Loop: Header=BB1_1 Depth=1
	callq	_rdtsc
	movq	%rax, -24(%rbp)
	movl	-8(%rbp), %ecx
	xorl	-8(%rbp), %ecx
	movl	%ecx, -8(%rbp)
	callq	_rdtsc
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	subq	-24(%rbp), %rax
	movslq	-16(%rbp), %rdx
	addq	%rax, %rdx
	movl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	jmp	LBB1_1
LBB1_3:
	movl	$2, %edi
	leaq	L_.str(%rip), %rsi
	movl	-16(%rbp), %edx
	movb	$0, %al
	callq	_dprintf
	movl	-16(%rbp), %edx
	xorl	-16(%rbp), %edx
	movl	%edx, -16(%rbp)
	movl	$1000000, -12(%rbp)     ## imm = 0xF4240
	movl	%eax, -52(%rbp)         ## 4-byte Spill
LBB1_4:                                 ## =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, %ecx
	addl	$-1, %ecx
	movl	%ecx, -12(%rbp)
	cmpl	$0, %eax
	je	LBB1_6
## BB#5:                                ##   in Loop: Header=BB1_4 Depth=1
	callq	_rdtsc
	movq	%rax, -40(%rbp)
	movl	$0, -8(%rbp)
	callq	_rdtsc
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	subq	-40(%rbp), %rax
	movslq	-16(%rbp), %rcx
	addq	%rax, %rcx
	movl	%ecx, %edx
	movl	%edx, -16(%rbp)
	jmp	LBB1_4
LBB1_6:
	movl	$2, %edi
	leaq	L_.str(%rip), %rsi
	movl	-16(%rbp), %edx
	movb	$0, %al
	callq	_dprintf
	xorl	%edx, %edx
	movl	%eax, -56(%rbp)         ## 4-byte Spill
	movl	%edx, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"%llu\n"


.subsections_via_symbols
